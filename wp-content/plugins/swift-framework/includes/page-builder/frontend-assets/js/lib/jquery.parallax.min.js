/*
Plugin: jQuery Parallax
Version 1.1.3
Author: Ian Lunn
Twitter: @IanLunn
Author URL: http://www.ianlunn.co.uk/
Plugin URL: http://www.ianlunn.co.uk/plugins/jquery-parallax/

Dual licensed under the MIT and GPL licenses:
http://www.opensource.org/licenses/mit-license.php
http://www.gnu.org/licenses/gpl.html
*/

(function( $ ){
	var $window = $(window);
	var windowHeight = $window.height();

	$window.resize(function () {
		windowHeight = $window.height();
	});

	function updateParallaxOffset( element ) {
		element.each( function() {
	  	    firstTop = element.offset().top;
		});
	}

	$.fn.parallax = function(xpos, speedFactor, outerHeight) {
		var $this = $(this);
		var getHeight;
		var firstTop;
		var paddingTop = 0;
		var supports3d = supports3d();
		
		//get the starting position of each element to have parallax applied to it, and check functionality
		$this.each(function() {
		    firstTop = $this.offset().top;

		   	if ( supports3d ) {
		   		$this.addClass('use-css-transform');
		    } else {
		    	$this.addClass('use-css-backpos');	
		    }
		    
		});

		$window.on( 'resize', updateParallaxOffset( $this ) );
		$window.on( 'load', updateParallaxOffset( $this ) );

		if (outerHeight) {
			getHeight = function(jqo) {
				return jqo.outerHeight(true);
			};
		} else {
			getHeight = function(jqo) {
				return jqo.height();
			};
		}
			
		// setup defaults if arguments aren't specified
		if (arguments.length < 1 || xpos === null) xpos = "50%";
		if (arguments.length < 2 || speedFactor === null) speedFactor = 0.1;
		if (arguments.length < 3 || outerHeight === null) outerHeight = true;
			
		// cache variables
		var $element, top, height, pos;

		// function to be called whenever the window is scrolled or resized
		function update() {
			
			pos = $window.scrollTop();				

			$this.each(function() {

				firstTop = $this.offset().top;

				$element = $(this);
				top = $element.offset().top;
				height = getHeight($element);

				// Check if totally above or totally below viewport
				if (top + height < pos || top > pos + windowHeight) {
					return;
				}

				// Caculate new y value
				var adjust = ($(this).find('.spb-row-parallax-layer').height() - height);
				var newY = Math.round(((window.innerHeight + pos - firstTop) * speedFactor) - adjust);

				// Apply adjustment
				if ( supports3d ) {
		        	$(this).find('.spb-row-parallax-layer').css({
			            '-webkit-transform': 'translate3d(0, ' + newY + 'px, 0)',
			            '-moz-transform': 'translate3d(0, ' + newY + 'px, 0), scale(1.1)',
			            '-ms-transform': 'translate3d(0, ' + newY + 'px, 0), scale(1.1)',
			            '-o-transform': 'translate3d(0, ' + newY + 'px, 0), scale(1.1)',
			            'transform': 'translate3d(0, ' + newY + 'px, 0)'
			        });
				} else {
					$(this).find('.spb-row-parallax-layer').css('backgroundPosition', xpos + " " + newY + "px");
				} 

			});
		}

		function supports3d() {
			// borrowed from modernizr
			var div = document.createElement('div'),
				ret = false,
				properties = ['perspectiveProperty', 'WebkitPerspective'];
			for (var i = properties.length - 1; i >= 0; i--){
				ret = ret ? ret : div.style[properties[i]] != undefined;
			};
	        
	        // webkit has 3d transforms disabled for chrome, though
	        //   it works fine in safari on leopard and snow leopard
	        // as a result, it 'recognizes' the syntax and throws a false positive
	        // thus we must do a more thorough check:
	        if (ret) {
	            var st = document.createElement('style');
	            // webkit allows this media query to succeed only if the feature is enabled.    
	            // "@media (transform-3d),(-o-transform-3d),(-moz-transform-3d),(-ms-transform-3d),(-webkit-transform-3d),(modernizr){#modernizr{height:3px}}"
	            st.textContent = '@media (-webkit-transform-3d){#test3d{height:3px}}';
	            document.getElementsByTagName('head')[0].appendChild(st);
	            div.id = 'test3d';
	            document.body.appendChild(div);
	            
	            ret = div.offsetHeight === 3;
	            
	            st.parentNode.removeChild(st);
	            div.parentNode.removeChild(div);
	        }
	        return ret;
		}

		$window.bind('scroll', function() {
			window.requestAnimationFrame(update);
		}).resize(function() {
			window.requestAnimationFrame(update);
		});

		update();
	};
})(jQuery);